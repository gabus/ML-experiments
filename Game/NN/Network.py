import copy
import json
import random

import numpy as np
from loguru import logger

from NN.Layer import Layer


class Network:
	"""
	layers_structure: list.
	[3, 5, 2] -- 3 input nodes, 5 hidden nodes, 2 output nodes
	"""

	def __init__(self, network_structure: list):
		if len(network_structure) < 3:
			raise Exception('layers_structure should contain at least 3 layers')

		self.network_structure = network_structure
		self.layers = []

		for nodes_count in network_structure:
			self.layers.append(Layer(nodes_count))

		for i, layer in enumerate(self.layers):
			# input layer doesn't have input_weights
			if i == 0:
				layer.name = 'input'
				continue

			layer.name = 'hidden_' + str(i)
			layer.initialize_weights(len(self.layers[i - 1].nodes))

			if i == len(self.layers) - 1:
				layer.name = 'output'

	def set_input_values(self, *args):
		input_layer = self.layers[0]
		if len(input_layer.nodes) != len(args):
			raise Exception('input node count ({}) does not match to provided input argument count ({})'.format(
				len(input_layer.nodes), len(args)))

		for key, input_value in enumerate(args):
			input_layer.nodes[key].node_value = input_value

	def run_network(self, debug=False) -> list:
		# foreach layer run
		layer_level = -1
		for layer in self.layers:

			layer_level += 1

			# ignore input layer -- nothing to calculate
			if layer_level == 0:
				continue

			if debug:
				logger.info(json.dumps(layer.as_dict(), indent=2))

			for node in layer.nodes:
				node_value = 0

				for key, input_node in enumerate(self.layers[layer_level - 1].nodes):
					node_value += input_node.node_value * node.input_weights[key]

				# run through activation function
				node.node_value = self.tanh(node_value)

		# return output layer nodes values
		return [n.node_value for n in self.layers[-1].nodes]

	def as_dict(self):
		return {
			'network_structure': self.network_structure,
			'layers': [l.as_dict() for l in self.layers],
		}

	def sigmoid(self, x):
		return 1 / (1 + np.exp(-x))

	def tanh(self, x):
		return np.tanh(x)

	def copy_network_with_mutation(self, mutation_rate: float, mutation_chance: float):
		mutation = random.uniform(-mutation_rate, mutation_rate)

		cp = copy.deepcopy(self)
		for layer in cp.layers:
			for node in layer.nodes:
				chance = random.uniform(0, 1)
				if chance <= mutation_chance:
					node.bias += mutation

				for key, weight in enumerate(node.input_weights):
					node.input_weights[key] = weight + mutation

		return cp

	def set_input_layer_meta(self, meta: list):
		for key, node in enumerate(self.layers[0].nodes):
			node.meta_data = meta[key]

	#  {'network_structure': [7, 20, 5], 'layers': [{'name': 'input', 'nodes': [{'input_weights': [], 'bias': -0.15583249319393913, 'node_value': 3.286}, {'input_weights': [], 'bias': -0.9050432081823819, 'node_value': 0.2}, {'input_weights': [], 'bias': -0.10224050252296374, 'node_value': 1}, {'input_weights': [], 'bias': -0.6185474561460247, 'node_value': 0}, {'input_weights': [], 'bias': 0.9672188210130018, 'node_value': 2}, {'input_weights': [], 'bias': 0.7297372925350829, 'node_value': 2}, {'input_weights': [], 'bias': -0.5166614715594635, 'node_value': 0}]}, {'name': 'hidden_1', 'nodes': [{'input_weights': [-0.03994701575014009, 0.06998455197034925, 0.7119713898485545, 0.7235594661141198, -0.42553930755809655, -0.40228711463691913, -0.34018752157791954], 'bias': 0.2665993251380303, 'node_value': -0.7860273507741912}, {'input_weights': [-0.890644138680517, 0.6600095708971923, -0.3071869398644831, -0.5104352779164094, 0.811051028310213, 0.7883207150109783, 0.2885378698213869], 'bias': -0.8633608273971277, 'node_value': 0.09659965463160886}, {'input_weights': [-0.20299059567898173, 0.7126940493946898, -0.4999686162766064, -0.4735957095371489, -0.6015984293196208, -0.4065840091943844, -0.0665435622886058], 'bias': -0.25511567240949484, 'node_value': -0.995441575387023}, {'input_weights': [-0.8439722348628306, 0.9366568583984003, 0.7133614214471957, -0.02286196294877635, -0.300016566913508, 0.6519968580250235, 0.15943793025083763], 'bias': -0.6039393059335479, 'node_value': -0.823835502291189}, {'input_weights': [0.09267753928174183, -0.030920769484204913, -0.48121742069626927, -0.15015111785551105, -0.0019128754435271955, -0.8618749217169391, 1.0651857014800903], 'bias': 0.6195838755397124, 'node_value': -0.9571222566936811}, {'input_weights': [-0.5306871683813166, 0.02340503228924229, -0.8777135817465106, 0.7217303977169267, 0.2987291968821117, 1.0609055118565476, -0.2934808023065554], 'bias': -0.9556634338848712, 'node_value': 0.10204240022531097}, {'input_weights': [-0.743134068124216, 0.5967105603919898, 0.004261852167969538, 0.36062538030007585, -0.7595408762179332, 0.2617722158619228, 0.38380329924196044], 'bias': -1.1603887912108388, 'node_value': -0.9973572068202107}, {'input_weights': [-0.6661915563377598, 0.489634994161283, 0.6355009998402266, 0.9698301446096484, -0.7765052895546729, 0.856973282829655, 0.12285040840463374], 'bias': -0.20318621650800986, 'node_value': -0.8603632892651168}, {'input_weights': [0.6914201165249787, 0.08196672838497188, 0.8529118566830065, -0.7141414464775473, -0.15830551804805515, -0.6999045005332933, 0.9864843095132596], 'bias': 0.012115972452279383, 'node_value': 0.890614964152183}, {'input_weights': [-0.2030436318550675, 0.03816530532145146, -0.041060953950943946, 0.9455963013439577, -0.692234353464809, 0.6393512169279196, 0.7071985021568221], 'bias': 0.6599308742292569, 'node_value': -0.6675970614377563}, {'input_weights': [0.08152804937209313, 0.8990344331686768, 0.8787814805518928, 0.07412711948011075, -0.3016296484665488, -0.4823473929149851, 0.3404492172207292], 'bias': 0.4945685347378982, 'node_value': -0.2368785958360942}, {'input_weights': [-0.07633420237112631, 0.8504115085812196, -0.5732661902085363, 0.36418136303010185, 0.024301555930149155, 0.44038283649229326, 0.011852944500945206], 'bias': 0.1967492280679847, 'node_value': 0.2685966185428828}, {'input_weights': [1.0382073235963445, 0.15387913726233393, 1.0332432099956559, 0.395818916775986, 0.952565139042107, -0.5055521151052902, 0.5522598217549217], 'bias': 0.9835638211284313, 'node_value': 0.9999566439021468}, {'input_weights': [0.6961900659490974, 0.3835121513995787, 0.18002155640311984, 0.5304724566847283, -0.5889420809592933, 1.0383383435680644, 1.0573620884983284], 'bias': -0.10136034727902077, 'node_value': 0.9979589033174985}, {'input_weights': [0.9569984651392562, 0.08742920821642297, 0.20525336236933894, 0.7580925058959056, 0.14226503343313207, 1.001232790329042, -0.8938900595015281], 'bias': -0.6375375015526259, 'node_value': 0.9999754728207726}, {'input_weights': [-0.20021867891100456, 0.10294169926429664, -0.060663348959271, 0.6020141721795784, -0.08215705580694499, 0.4724385962351504, -0.23125349853841506], 'bias': -0.5186752349880626, 'node_value': 0.08238235790619129}, {'input_weights': [0.9808437875168985, 0.07270047794424528, 0.5782579897787956, 0.3130949137071846, 0.346298365614214, -0.8400514727334022, -0.7581896049783756], 'bias': -0.14995058311497514, 'node_value': 0.9930361995320371}, {'input_weights': [1.0165581273941122, 0.6223212584265101, -0.7965946552358276, 0.6325334870515751, -0.30393798088880786, 1.0247271214220992, -0.738316982925209], 'bias': 0.9614044662713448, 'node_value': 0.9994615618063881}, {'input_weights': [0.9235926320861358, 0.2514290086888623, 0.6347503532950527, -0.8767995767017497, 0.1519702730340925, 0.978983324328353, 0.26354240884199986], 'bias': 0.4034227133619016, 'node_value': 0.999987257869188}, {'input_weights': [-0.2712166452651683, -0.5254528579298572, 1.0222708838070649, -0.07266042704069309, 1.0304126119780979, -0.583226344748045, 0.06290051150659527], 'bias': 0.5647233638113924, 'node_value': 0.7260558322686838}]}, {'name': 'output', 'nodes': [{'input_weights': [0.28288059499805684, 0.46039063798930946, 0.1386487278301582, 0.2858593226243767, -0.08756807688550705, 0.5218982640493414, 1.0034247862122943, -0.029067850387791527, -0.29322577916014314, 0.06972563690377111, -0.8467928060132791, -0.3496219578571922, -0.8679226906478595, -0.01963556681820028, -0.7160409989298488, -0.04177486063254171, -0.22078559227372865, -0.4137090946329587, 1.0526711823414965, -0.6631927751928248], 'bias': 0.8248215681221512, 'node_value': -0.9970549305171298}, {'input_weights': [0.17472164563987458, 0.2586486680929022, -0.20981178362272737, 0.32896582001883873, 0.3364249792821643, 0.4725538346729624, -0.7114035187369325, -0.7104674059206046, -0.4111751429946533, -0.5972143088575774, 0.9984341066597402, -0.7083354931621424, 0.4701728448018898, -0.6515177521171023, -0.38137949422295825, -0.7875303693317273, 0.025081361256984236, -0.892016388592671, -0.8300865545010434, -0.7916852502883476], 'bias': -0.4672708464367722, 'node_value': -0.9842964508752577}, {'input_weights': [1.005494825737884, 0.435052601461027, 0.2370101230975846, 0.6865076314004421, -0.7969442017856616, -0.20171318427470866, 0.11120881663602036, 0.6765110302406612, -0.19654183841083486, 0.37710350781102386, -0.12245945269008074, -0.41147344611418357, 0.6792592413369452, -0.0383716188042485, -0.4132266127916828, 0.8351230415461843, 0.05337554556715583, 0.8981642233711196, 0.1713653945786704, -0.8132941465559809], 'bias': 0.5051909746476883, 'node_value': -0.8277126893983454}, {'input_weights': [0.33527542427577295, 0.6410517301284233, 0.8951967155890388, 0.22483823609290973, -0.7905110448537278, 0.37809810061477234, 0.494443207810078, 0.6755553362439897, 0.4162424343809066, 0.976153036626658, 0.8883496537307491, -0.05571521886268399, 0.8687972453714319, 0.15324485273281663, 0.07665950942600985, 0.9028410887413612, -0.9038872052258121, -0.10104125890089916, -0.6645617143352276, -0.2183471149073635], 'bias': 0.730651555577924, 'node_value': -0.9912270471200367}, {'input_weights': [-0.24696728797972992, 0.9580697242468434, 0.0846688520012584, -0.6422140738318833, 0.7611294730324583, 0.7372890745285041, 0.9306424997796079, -0.10445425419990878, -0.836477085041886, -0.36757812926993516, -0.8502652728073491, -0.5240504671379842, 0.9106452841110091, -0.48992187180733615, -0.8054135016145447, -0.8479649575900435, 0.1372638395593639, 0.6622541459325244, 0.4512095267863825, 0.6266673629081181], 'bias': -0.25061843723587673, 'node_value': 0.05175235304738101}]}]}
	def load_from_json(self, json_: json):
		pass
